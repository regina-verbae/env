; ####### MISC ######################################################

; ############# FileFinder ##########################################

; ## Install directory's contents as executables
[ExecDir]
; dir = ## default is bin

; ## Install directory's contents as module-based ShareDir
; ##   (see File::ShareDir)
; [ModuleShareDirs]
; Thing = share

; ####### BEFORE BUILD ##############################################

; ## Make sure all needed modules are up to date
[PromptIfStale]
phase = build
check_authordeps = 1
check_all_plugins = 1
check_all_prereqs = 1
; skip = ## Module to skip checking

; ############# NameProvider ########################################

; ############# VersionProvider #####################################

; ## Determine version number
; [RewriteVersion] (dual with FileMunger) below

; ############# ReleaseStatusProvider ###############################

; ############# LicenseProvider #####################################

; ############# MetaProvider ########################################

; ## Set the AUTHORITY in metadata
[Authority]
authority = cpan:EHLERS
; ## Do not add 'our $AUTHORITY' to modules
do_munging = 0

; ## Add github repo's info to META
[GitHub::Meta]

; ## Populate CONTRIBUTORS POD from list of git authors
; ##   Use the following in weaver.ini for CONTRIBUTORS section:
; ##     [Contributors]
; ## Also adds contributors to x_contributors in META
; ## Fix duplicate author name/emails in .mailmap file (git help shortlog)
[ContributorsFromGit]

; ## Prevent CPAN indexing files
[MetaNoIndex]
directory = t
directory = xt
directory = corpus

; ## Set the provides property in META (ignores MetaNoIndex automatically)
[MetaProvides::Package]

; ####### BUILD #####################################################

; ############# FileGatherer ########################################

; ## Include all tracked files from git repository in build
[Git::GatherDir]
; exclude_filename = ## do not include this file
; exclude_match = ## do not include files that match this regex

; ## Add a LICENSE file appropriate for the dist's license attribute
[License]

; ## Adds placeholding README.mkdn file to dist
; [ReadmeMarkdownFromPod] (multiple from AfterBuild below)

; ## Adds t/00-compile.t which makes sure everything compiles
[Test::Compile]
; skip = ## regex to skip modules (by module name, not filename)

; ## Adds t/00-report-prereqs.t which reports dependency versions
[Test::ReportPrereqs]

; ## Adds xt/release/minimum-version.t which tests for min Perl version
[Test::MinimumVersion]
; ## Test will fail if minimum version exceeds this
; ##   Then use `perlver --blame` to discover what caused it to exceed
max_target_perl = 5.010

; ## Adds t/author/pod-spell.t which tests spelling in POD
; ## Add stopwords to individual files like so:
; ##   =for stopwords <word> <word> ...
[Test::PodSpelling]
; stopword = <global stopword>

; ## Adds xt/release/meta-yaml.t which tests CPAN::Meta
[MetaTests]

; ## Adds xt/author/pod-syntax.t to test POD syntax
[PodSyntaxTests]

; ## Adds xt/author/test-version.t which makes sure everything has a version
[Test::Version]

; ## Adds META.yml file
[MetaYAML]

; ## Adds META.json file
[MetaJSON]

; ## Adds cpanfile
[CPANFile]

; ## Adds MANIFEST file (MUST BE LAST of FileGatherers
[Manifest]

; ############# EncodingProvider ####################################

; ## Explicitly set encoding on files in distribution
; [Encoding]
; encoding = <type> (bytes for raw)
; filename = <file>
; match = regex

; ############# FilePruner ##########################################

; ## Remove dot files and leftovers from previous builds
[PruneCruft]
; except = ## don't prune files that match this regex

; ## Prune files in a MANIFEST.SKIP file, if exists
; ##   The file contains regexes.  See ExtUtils::Manifest.
[ManifestSkip]

; ############# FileMunger ##########################################

; ## Determines version from main module and munges all $VERSION's to match
; ## Modules should include:
; ##     our $VERSION = '#.#{2,3}';
; ##  or
; ##     our $VERSION = v#.#.#;
; ## In combination with [BumpVersionAfterRelease],
; ##   never have to do anything unless upping main version number:
; ##     V=1.000 dzil release
[RewriteVersion]
; ## Adds a comment after $VERSION containing package's tar file name
add_tarball_name = 1

; ## Apply PodWeaver to files iff file contains one of the following:
; ##   # Dist::Zilla: +PodWeaver
; ##   # ABSTRACT: ...
; ## Forcibly DISable PodWeaver on a file with the following:
; ##   # Dist::Zilla: -PodWeaver
[SurgicalPodWeaver]
; ## These are options in Pod::Elemental::PerlMunger
replacer = replace_with_comment
post_code_replacer = replace_with_nothing

; ## Inserts VERSION in changelog
; [NextRelease] (dual in AfterRelease below)

; ############# PrereqSource ########################################

; ## Detect minimum version of Perl and add to prereqs
[MinimumPerl]

; ## Extract prerequisites from files
[AutoPrereqs]

; ## Adds Dist::Zilla and dzil authordeps to develop phase prereqs
[Prereqs::AuthorDeps]

; ## Explicitly list additional prerequisites not found by AutoPrereqs
; [Prereqs]
; -phase = {configure,build,test,runtime,develop}
; -relationship = {requires,recommends,suggests,conflicts}
; <Module> = <minimum version> (0 for any)

; ############# InstallTool #########################################

; ## Build Makefile.PL using ExtUtils::MakeMaker
[MakeMaker]
; ## Recommended by DAGOLDEN
eumm_version = 6.17

; ############# AfterBuild ##########################################

; ## Generates README.mkdn out of POD from main module
[ReadmeMarkdownFromPod]

; ## Copy the generated README.mkdn file to root dir for commit to git
[CopyFilesFromBuild]
copy = README.mkdn

; ############# BeforeArchive #######################################

; ####### RELEASE ###################################################

; ############# BeforeRelease #######################################

; ################# TestRunner ######################################

; ## Run extra tests (in xt dir)
[RunExtraTests]

; ## Run tests before release
[TestRelease]

; ## Makes sure changelog has been updated
[CheckChangesHasContent]

; ## Make sure all prereqs on CPAN
[CheckPrereqsIndexed]

; ## Make sure on correct branch before release
[Git::CheckFor::CorrectBranch]

; ## Make sure repo is clean before release
[Git::Check]
allow_dirty = dist.ini
allow_dirty = README.mkdn
allow_dirty = Changes

; ## Make sure repository and bugtracker resources in META
[CheckMetaResources]
;homepage = 1 ## Also check homepage

; ## Prompt for confirmation before actual release
[ConfirmRelease]

; ############# Releaser ############################################

; ## Upload to CPAN
; [UploadToCPAN]

; ## Pretend release, but don't actually do anything
[FakeRelease]

; ############# AfterRelease ########################################

; ## Commit the released version of the codebase
; ##   Automatically adds Changes and dist.ini files
[Git::Commit / Commit_Released_Files]
allow_dirty = README.mkdn

; ## Tag the released version
[Git::Tag]
tag_format = release-%v

; ## Inserts {{$NEXT}} in changelog
[NextRelease]
; ## Change format to not print the long timezone name
; ##   See FileMunger section above
format = %-9v %{yyyy-MM-dd HH:mm:ssZZZZZ}d

; ## Replaces $VERSION in source code with next version number,
; ##   prepared for next release
[BumpVersionAfterRelease]

; ## Commit the VERSION bump change in changelog and modules
; ##   Automatically adds Changes and dist.ini files
[Git::Commit / Commit_Version_Bump]
commit_msg = Bump $VERSION after release
allow_dirty_match = ^lib

; ## Update GitHub repository info
[GitHub::Update]
; ## Use metacpan release page for dist as GitHub homepage
metacpan = 1

; ## Push the committed changes upstream
[Git::Push]
